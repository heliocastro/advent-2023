[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "aoc2023"
version = "0.0.1"
description = "Advent of Code 2023"
authors = ["Helio Chissini de Castro <heliocastro@gmail.com>"]
maintainers = ["Helio Chissini de Castro <heliocastro@gmail.com>"]
readme = "README.md"
license = "GPLv3"
packages = [{ include = "advent" }]
keywords = ["aoc2023", "AdventOfCode2023", "aoc"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

[tool.poetry.dependencies]
python = "^3.10"
click = "^8.1.7"
rich = "^13.6.0"
pydantic = "^2.5.1"
toml = "^0.10.2"


[tool.poetry.group.dev.dependencies]
pre-commit = "^3.5.0"
mypy = "^1.7.0"
pycodestyle = "^2.11.1"
pylint = "^3.0.2"
pytest-mypy = "^0.10.3"
pytest-cov = "^4.1.0"
ruff = "^0.1.5"
types-toml = "^0.10.8.7"

[tool.poetry.scripts]
aoc2023 = "advent.application:main"

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 120

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib"]
log_cli = true
log_cli_level = "INFO"
pythonpath = "src"

[tool.pylint.messages_control]
disable = [
    "abstract-method",
    "arguments-differ",
    "attribute-defined-outside-init",
    "blacklisted-name",
    "chained-comparison",
    "duplicate-code",
    "eval-used",
    "exec-used",
    "expression-not-assigned",
    "fixme",
    "global-statement",
    "invalid-name",
    "import-error",
    "logging-fstring-interpolation",
    "missing-docstring",
    "no-member",
    "no-name-in-module",
    "protected-access",
    "redefined-argument-from-local",
    "redefined-outer-name",
    "reimported",
    "stop-iteration-return",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-return-statements",
    "too-many-statements",
    "unexpected-special-method-signature",
    "unspecified-encoding",
]

[tool.mypy]
follow_imports = "normal"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff]
fix = true
line-length = 120
ignore = [
    'N802',   # function name should be lowercase
    'SIM105', # Suggest contextlib instead of try/except with pass
]
extend-select = [
    "E",   # pycodestyle error
    "W",   # pycodestyle warning
    "F",   # pyflakes
    "A",   # flakes8-builtins
    "COM", # flakes8-commas
    "C4",  # flake8-comprehensions
    "Q",   # flake8-quotes
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "I",   # isort
    "N",   # pep8 naming
    "UP",  # pyupgrade
    "S",   # bandit
]

# Exclude a variety of commonly ignored directories.
extend-exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = {}

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
required-imports = ["from __future__ import annotations"]

[tool.pyright]
reportUnboundVariable = false
